name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  IaC:
    name: "IaC"
    runs-on: ubuntu-latest
    outputs:
      app_service_name:  ${{steps.terraform_output.outputs.app-name}}
      database_server:   ${{steps.terraform_output.outputs.database_server}}
      database_name:     ${{steps.terraform_output.outputs.database_name}}
      database_port:     ${{steps.terraform_output.outputs.database_port}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false # for purpose of outputs

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

      - name: Call terraform output
        id: terraform_output
        run: |
           echo "::set-output name=app-name::$(terraform output --raw app_service_name)"
        #   echo "::set-output name=database_server::$(terraform output --raw database_server)"
        #   echo "::set-output name=database_name::$(terraform output --raw database_name)"
        #   echo "::set-output name=database_port::$(terraform output --raw database_port)"
  
  build:
    name: "build&deploy"
    runs-on: ubuntu-latest
    needs: IaC
    env:
      APP-NAME: ${{needs.IaC.outputs.app_service_name}}

    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build with Maven
        run: mvn package -Dmaven.test.skip --file pom.xml

      - name: Azure WebApp
        uses: Azure/webapps-deploy@v2
        with:
          app-name: ${{env.APP-NAME}}
          package: ${{ github.workspace }}/target/*.jar
